// Triangular element test
#include <memory>

#include "catch.hpp"

#include "triangle_alme_element.h"

//! \brief Check triangle lme element class
TEST_CASE("Triangle alme elements are checked", "[tri][element][2D][alme]") {
  const unsigned Dim = 2;
  const double Tolerance = 1.E-6;

  Eigen::Vector2d zero = Eigen::Vector2d::Zero();
  Eigen::Matrix2d def_gradient = Eigen::Matrix2d::Identity();

  //! Check for center element nodes
  SECTION("Linear Triangle ALME Element") {
    std::shared_ptr<mpm::Element<Dim>> tri =
        std::make_shared<mpm::TriangleALMEElement<Dim>>();

    // Check degree and shapefn type
    REQUIRE(tri->degree() == mpm::ElementDegree::Infinity);
    REQUIRE(tri->shapefn_type() == mpm::ShapefnType::ALME);

    // Coordinates is (0,0) before upgraded
    SECTION("2D LME for coordinates in the barycentre before upgrade") {
      Eigen::Matrix<double, Dim, 1> coords;
      coords << 0.16666666666, 0.16666666666;
      auto shapefn = tri->shapefn(coords, zero, def_gradient);

      // Check shape function
      REQUIRE(shapefn.size() == 3);

      REQUIRE(shapefn(0) == Approx(0.66666666666).epsilon(Tolerance));
      REQUIRE(shapefn(1) == Approx(0.16666666666).epsilon(Tolerance));
      REQUIRE(shapefn(2) == Approx(0.16666666666).epsilon(Tolerance));

      // Check gradient of shape functions
      auto gradsf = tri->grad_shapefn(coords, zero, def_gradient);
      REQUIRE(gradsf.rows() == 3);
      REQUIRE(gradsf.cols() == Dim);

      REQUIRE(gradsf(0, 0) == Approx(-1.0).epsilon(Tolerance));
      REQUIRE(gradsf(1, 0) == Approx(1.0).epsilon(Tolerance));
      REQUIRE(gradsf(2, 0) == Approx(0.0).epsilon(Tolerance));
      REQUIRE(gradsf(0, 1) == Approx(-1.0).epsilon(Tolerance));
      REQUIRE(gradsf(1, 1) == Approx(0.0).epsilon(Tolerance));
      REQUIRE(gradsf(2, 1) == Approx(1.0).epsilon(Tolerance));
    }

    // Initialising upgrade properties
    SECTION("2D triangle LME element regular element - nnodes = 108") {
      Eigen::Matrix<double, 108, Dim> nodal_coords;
      nodal_coords << -0.5, 0., 0.5, 0., -1.5, 0., 0., 0.8660254, 1., 0.8660254,
          -1., 0.8660254, 0., -0.8660254, 1., -0.8660254, -1., -0.8660254, 0.5,
          1.73205081, -0.5, 1.73205081, -1.5, 1.73205081, -3.5, -3.46410162,
          -2.5, -3.46410162, -4.5, -3.46410162, -3., -2.59807621, -2.,
          -2.59807621, -4., -2.59807621, -3., -4.33012702, -2., -4.33012702,
          -4., -4.33012702, -2.5, -1.73205081, -3.5, -1.73205081, -4.5,
          -1.73205081, -3.5, 0., -2.5, 0., -4.5, 0., -3., 0.8660254, -2.,
          0.8660254, -4., 0.8660254, -3., -0.8660254, -2., -0.8660254, -4.,
          -0.8660254, -2.5, 1.73205081, -3.5, 1.73205081, -4.5, 1.73205081,
          -3.5, 3.46410162, -2.5, 3.46410162, -4.5, 3.46410162, -3., 4.33012702,
          -2., 4.33012702, -4., 4.33012702, -3., 2.59807621, -2., 2.59807621,
          -4., 2.59807621, -2.5, 5.19615242, -3.5, 5.19615242, -4.5, 5.19615242,
          -0.5, -3.46410162, 0.5, -3.46410162, -1.5, -3.46410162, 0.,
          -2.59807621, 1., -2.59807621, -1., -2.59807621, 0., -4.33012702, 1.,
          -4.33012702, -1., -4.33012702, 0.5, -1.73205081, -0.5, -1.73205081,
          -1.5, -1.73205081, -0.5, 3.46410162, 0.5, 3.46410162, -1.5,
          3.46410162, 0., 4.33012702, 1., 4.33012702, -1., 4.33012702, 0.,
          2.59807621, 1., 2.59807621, -1., 2.59807621, 0.5, 5.19615242, -0.5,
          5.19615242, -1.5, 5.19615242, 2.5, -3.46410162, 3.5, -3.46410162, 1.5,
          -3.46410162, 3., -2.59807621, 4., -2.59807621, 2., -2.59807621, 3.,
          -4.33012702, 4., -4.33012702, 2., -4.33012702, 3.5, -1.73205081, 2.5,
          -1.73205081, 1.5, -1.73205081, 2.5, 0., 3.5, 0., 1.5, 0., 3.,
          0.8660254, 4., 0.8660254, 2., 0.8660254, 3., -0.8660254, 4.,
          -0.8660254, 2., -0.8660254, 3.5, 1.73205081, 2.5, 1.73205081, 1.5,
          1.73205081, 2.5, 3.46410162, 3.5, 3.46410162, 1.5, 3.46410162, 3.,
          4.33012702, 4., 4.33012702, 2., 4.33012702, 3., 2.59807621, 4.,
          2.59807621, 2., 2.59807621, 3.5, 5.19615242, 2.5, 5.19615242, 1.5,
          5.19615242;

      SECTION("2D triangle LME regular element no support") {
        double gamma = 0.5;
        double h = 1.0;

        // Calculate beta
        double beta = gamma / (h * h);

        // Calculate support radius automatically
        double tol0 = 1.e-10;
        double r = h * std::sqrt(-std::log(tol0) / gamma);

        REQUIRE_NOTHROW(
            tri->initialise_lme_connectivity_properties(beta, r, nodal_coords));

        // Coordinates is (0,0) after upgrade
        SECTION("2D BSpline element for coordinates(0,0) after upgrade") {
          Eigen::Matrix<double, Dim, 1> coords;
          coords << 0.5, 0.0;
          auto shapefn = tri->shapefn(coords, zero, def_gradient);

          // Check shape function
          REQUIRE(shapefn.size() == 108);
          REQUIRE(shapefn.sum() == Approx(1.).epsilon(Tolerance));

          Eigen::VectorXd shapefn_ans = Eigen::VectorXd::Constant(108, 1.0);
          shapefn_ans << 1.21635545e-01, 1.21639932e-01, 4.47456021e-02,
              9.47313639e-02, 5.74595492e-02, 5.74554042e-02, 9.47317677e-02,
              5.74597941e-02, 5.74556491e-02, 2.71414218e-02, 2.71404428e-02,
              9.98405081e-03, 7.47280118e-07, 1.50100638e-05, 1.36864191e-08,
              5.23892140e-05, 6.38254305e-04, 1.58196012e-06, 1.29860432e-07,
              1.58208099e-06, 3.92130381e-09, 1.35115713e-03, 6.72677258e-05,
              1.23200693e-06, 3.01471746e-04, 6.05544031e-03, 5.52144847e-06,
              1.05225652e-03, 1.28195711e-02, 3.17742475e-05, 1.05226101e-03,
              1.28196258e-02, 3.17743829e-05, 1.35114561e-03, 6.72671523e-05,
              1.23199643e-06, 7.47267376e-07, 1.50098079e-05, 1.36861857e-08,
              1.29857664e-07, 1.58204727e-06, 3.92122023e-09, 5.23885440e-05,
              6.38246143e-04, 1.58193989e-06, 8.30165475e-09, 4.13300144e-10,
              0.00000000e+00, 3.01506941e-04, 3.01517817e-04, 1.10914204e-04,
              4.71643710e-03, 2.86076689e-03, 2.86056052e-03, 1.16909286e-05,
              7.09116240e-06, 7.09065085e-06, 2.71416532e-02, 2.71406742e-02,
              9.98413593e-03, 3.01501800e-04, 3.01512676e-04, 1.10912313e-04,
              1.16906794e-05, 7.09101125e-06, 7.09049972e-06, 4.71637679e-03,
              2.86073031e-03, 2.86052394e-03, 1.66761237e-07, 1.66755222e-07,
              6.13436053e-08, 1.50127712e-05, 7.47468826e-07, 1.10926207e-04,
              5.24005535e-05, 1.58241668e-06, 6.38346400e-04, 1.29888540e-07,
              3.92243552e-09, 1.58230927e-06, 6.72847126e-05, 1.35140083e-03,
              9.98521639e-03, 6.05653252e-03, 3.01547876e-04, 4.47504444e-02,
              1.05248428e-03, 3.17834177e-05, 1.28214209e-02, 1.05248877e-03,
              3.17835532e-05, 1.28214755e-02, 6.72841389e-05, 1.35138931e-03,
              9.98513125e-03, 1.50125152e-05, 7.47456080e-07, 1.10924316e-04,
              1.29885771e-07, 3.92235191e-09, 1.58227555e-06, 5.23998834e-05,
              1.58239645e-06, 6.38338237e-04, 4.13404513e-10, 8.30315211e-09,
              6.13502437e-08;

          for (unsigned i = 0; i < 108; ++i)
            REQUIRE(shapefn(i) == Approx(shapefn_ans(i)).epsilon(Tolerance));

          // Check gradient of shape functions
          auto gradsf = tri->grad_shapefn(coords, zero, def_gradient);
          REQUIRE(gradsf.rows() == 108);
          REQUIRE(gradsf.cols() == Dim);

          Eigen::Matrix<double, 108, Dim> gradsf_ans;
          gradsf_ans << -6.08295281e-02, 5.19990514e-12, 6.08317223e-02,
              -5.20009271e-12, -6.71313769e-02, 5.73860759e-12, -7.01438073e-12,
              8.20407795e-02, 5.74706559e-02, 4.97620430e-02, -5.74665101e-02,
              4.97584533e-02, 7.01441063e-12, -8.20411292e-02, 5.74709009e-02,
              -4.97622551e-02, -5.74667551e-02, -4.97586654e-02, 1.35733341e-02,
              4.70109014e-02, -1.35728445e-02, 4.70092057e-02, -1.49789710e-02,
              1.72930965e-02, -2.61598598e-06, -2.58868619e-06, -3.75324130e-05,
              -5.19970276e-05, -6.16007909e-08, -4.74117313e-08,
              -1.57198022e-04, -1.36112849e-04, -1.27675535e-03,
              -1.65825378e-03, -6.32906363e-06, -4.11010364e-06,
              -3.89656600e-07, -5.62319100e-07, -3.16477361e-06,
              -6.85069614e-06, -1.56882471e-08, -1.69799530e-08,
              -3.37854575e-03, -2.34030165e-03, -2.35482549e-04,
              -1.16512556e-04, -5.54510285e-06, -2.13392492e-06,
              -1.05535507e-03, 9.02151704e-14, -1.51415270e-02, 1.29434678e-12,
              -2.48513209e-05, 2.12437142e-15, -3.15737976e-03, 9.11292118e-04,
              -2.56440982e-02, 1.11022112e-02, -1.27121557e-04, 2.75176449e-05,
              -3.15739322e-03, -9.11296002e-04, -2.56442075e-02,
              -1.11022585e-02, -1.27122099e-04, -2.75177622e-05,
              -3.37851695e-03, 2.34028170e-03, -2.35480542e-04, 1.16511562e-04,
              -5.54505557e-06, 2.13390673e-06, -2.61594137e-06, 2.58864205e-06,
              -3.75317731e-05, 5.19961410e-05, -6.15997405e-08, 4.74109228e-08,
              -3.89648295e-07, 5.62307114e-07, -3.16470615e-06, 6.85055012e-06,
              -1.56879127e-08, 1.69795911e-08, -1.57196012e-04, 1.36111109e-04,
              -1.27673903e-03, 1.65823257e-03, -6.32898269e-06, 4.11005108e-06,
              -2.07581486e-08, 4.31371954e-08, -1.44683012e-09, 2.14759703e-09,
              -0.00000000e+00, 0.00000000e+00, -1.50782611e-04, -1.04446356e-03,
              1.50788050e-04, -1.04450124e-03, -1.66403465e-04, -3.84222813e-04,
              1.04768529e-12, -1.22538142e-02, 2.86131987e-03, -7.43258208e-03,
              -2.86111346e-03, -7.43204590e-03, 4.32827211e-15, -5.06238300e-05,
              7.09253310e-06, -3.07060126e-05, -7.09202145e-06, -3.07037975e-05,
              1.35734498e-02, -4.70113022e-02, -1.35729602e-02, -4.70096065e-02,
              -1.49790987e-02, -1.72932440e-02, -1.50780040e-04, 1.04444575e-03,
              1.50785478e-04, 1.04448343e-03, -1.66400628e-04, 3.84216261e-04,
              -4.32817986e-15, 5.06227510e-05, 7.09238192e-06, 3.07053581e-05,
              -7.09187029e-06, 3.07031431e-05, -1.04767189e-12, 1.22536575e-02,
              2.86128328e-03, 7.43248703e-03, -2.86107687e-03, 7.43195086e-03,
              8.33967358e-08, 8.66527495e-07, -8.33937279e-08, 8.66496239e-07,
              -9.20331942e-08, 3.18754654e-07, 3.75391827e-05, -5.20064062e-05,
              2.61664658e-06, -2.58933990e-06, 1.66421473e-04, -3.84264392e-04,
              1.57232047e-04, -1.36142310e-04, 6.33089023e-06, -4.11128984e-06,
              1.27693958e-03, -1.65849305e-03, 3.89740940e-07, -5.62440812e-07,
              1.56927748e-08, -1.69848535e-08, 3.16523026e-06, -6.85168464e-06,
              2.35542015e-04, -1.16541978e-04, 3.37915513e-03, -2.34072377e-03,
              1.49807197e-02, -1.72951154e-02, 1.51442581e-02, -1.29458024e-12,
              1.05562157e-03, -9.02379521e-14, 6.71386417e-02, -5.73922861e-12,
              3.15806316e-03, 9.11489363e-04, 1.27158245e-04, 2.75255866e-05,
              2.56477984e-02, 1.11038131e-02, 3.15807662e-03, -9.11493249e-04,
              1.27158787e-04, -2.75257040e-05, 2.56479078e-02, -1.11038605e-02,
              2.35540007e-04, 1.16540984e-04, 3.37912632e-03, 2.34070381e-03,
              1.49805920e-02, 1.72949679e-02, 3.75385426e-05, 5.20055195e-05,
              2.61660196e-06, 2.58929575e-06, 1.66418635e-04, 3.84257840e-04,
              3.89732633e-07, 5.62428824e-07, 1.56924404e-08, 1.69844915e-08,
              3.16516279e-06, 6.85153860e-06, 1.57230036e-04, 1.36140569e-04,
              6.33080927e-06, 4.11123727e-06, 1.27692325e-03, 1.65847184e-03,
              1.44719548e-09, 2.14813935e-09, 2.07618927e-08, 4.31449760e-08,
              9.20431538e-08, 3.18789149e-07;

          for (unsigned i = 0; i < gradsf.rows(); ++i)
            for (unsigned j = 0; j < gradsf.cols(); ++j)
              REQUIRE(gradsf(i, j) ==
                      Approx(gradsf_ans(i, j)).epsilon(Tolerance));
        }

        // Coordinates is (0,0) after upgrade
        SECTION("2D ALME element for coordinates(0.5,0) after shear") {
          def_gradient(0, 1) = 1.0;
          Eigen::Matrix<double, Dim, 1> coords;
          coords << 0.5, 0.0;
          auto shapefn = tri->shapefn(coords, zero, def_gradient);

          // Check shape function
          REQUIRE(shapefn.size() == 108);
          REQUIRE(shapefn.sum() == Approx(1.).epsilon(Tolerance));

          Eigen::VectorXd shapefn_ans = Eigen::VectorXd::Constant(108, 1.0);
          shapefn_ans << 1.21707502e-01, 1.21965507e-01, 4.46789737e-02,
              6.52011885e-02, 9.42188942e-02, 1.65988706e-02, 6.52275039e-02,
              1.66760482e-02, 9.38585618e-02, 1.44307328e-02, 2.54770184e-03,
              1.65468120e-04, 3.39741729e-04, 2.14048309e-04, 1.98377085e-04,
              4.33256813e-03, 3.93614530e-03, 1.75438618e-03, 4.80891599e-06,
              7.72952493e-07, 1.10064457e-05, 2.28263577e-02, 6.40993468e-03,
              6.62180072e-04, 2.99772247e-04, 6.03385052e-03, 5.47890561e-06,
              5.35600715e-05, 1.55455855e-03, 6.78860797e-07, 9.67557359e-03,
              4.96846859e-02, 6.93164655e-04, 3.95353496e-06, 3.47506035e-08,
              0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
              0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 7.34917662e-10,
              1.20565966e-07, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
              0.00000000e+00, 4.23013443e-06, 1.32688606e-07, 4.96112564e-05,
              1.61748073e-04, 7.31612961e-06, 1.31553486e-03, 9.94215618e-10,
              0.00000000e+00, 4.57050231e-08, 2.55516396e-03, 1.44118324e-02,
              2.99037155e-02, 1.32194371e-07, 4.23226503e-06, 1.51900284e-09,
              9.92211696e-10, 4.58064936e-08, 0.00000000e+00, 1.61552385e-04,
              1.31951998e-03, 7.27639542e-06, 0.00000000e+00, 0.00000000e+00,
              0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.53115307e-09,
              7.45216555e-10, 0.00000000e+00, 1.21738847e-07, 0.00000000e+00,
              0.00000000e+00, 0.00000000e+00, 3.52980400e-08, 3.99884405e-06,
              1.66657116e-04, 6.09807745e-03, 3.04249006e-04, 4.49637187e-02,
              9.79534053e-03, 7.04723224e-04, 5.00871144e-02, 5.42668311e-05,
              6.90738080e-07, 1.56841520e-03, 6.50041154e-03, 2.30507209e-02,
              3.00700182e-02, 2.15977842e-04, 3.44259272e-04, 4.98469130e-05,
              4.86059032e-06, 1.11719319e-05, 7.77956429e-07, 4.38265943e-03,
              1.78220180e-03, 3.96482560e-03, 4.51922067e-08, 5.01610931e-09,
              2.04821694e-10;

          for (unsigned i = 0; i < 108; ++i)
            REQUIRE(shapefn(i) == Approx(shapefn_ans(i)).epsilon(Tolerance));

          // Check gradient of shape functions
          auto gradsf = tri->grad_shapefn(coords, zero, def_gradient);
          REQUIRE(gradsf.rows() == 108);
          REQUIRE(gradsf.cols() == Dim);

          Eigen::Matrix<double, 108, Dim> gradsf_ans;
          gradsf_ans << -6.14157421e-02, 6.08725772e-02, 6.15459361e-02,
              -6.10016198e-02, -6.76373835e-02, 6.70391940e-02, -5.64833544e-02,
              1.12925506e-01, 1.34678170e-02, 6.89348153e-02, -3.11316538e-02,
              4.53524980e-02, 5.65061513e-02, -1.12971083e-01, 3.12764027e-02,
              -4.55633676e-02, -1.34163104e-02, -6.86711798e-02,
              -1.77204939e-02, 4.27691529e-02, -5.69972927e-03, 1.00992534e-02,
              -5.37182211e-04, 8.21445548e-04, -2.28135171e-05, -1.16420524e-03,
              2.01651813e-04, -9.47601587e-04, -2.13530059e-04, -4.81347454e-04,
              -1.85791508e-03, -9.50970991e-03, 2.28457712e-03, -1.25769502e-02,
              -2.52291342e-03, -2.09583652e-03, 6.26967853e-06, -2.72129124e-05,
              1.78783634e-06, -5.14721033e-06, 3.24168643e-06, -5.12739246e-05,
              -1.80442615e-02, -2.19848870e-02, -1.15361917e-02, 2.38278837e-04,
              -1.86004485e-03, 6.87000392e-04, -1.05889237e-03, 1.04952746e-03,
              -1.52239345e-02, 1.50892930e-02, -2.48827676e-05, 2.46627028e-05,
              -2.08562847e-04, 2.53493542e-04, -4.48453385e-03, 5.80250399e-03,
              -3.32861319e-06, 3.89203942e-06, -2.09129009e-02, 1.22780455e-02,
              -5.72455472e-02, 1.33484877e-02, -2.19778052e-03, 1.57298660e-03,
              -1.68249576e-05, 2.35815822e-05, -1.82958784e-07, 2.42037683e-07,
              -0.00000000e+00, 0.00000000e+00, -0.00000000e+00, 0.00000000e+00,
              -0.00000000e+00, 0.00000000e+00, -0.00000000e+00, 0.00000000e+00,
              -0.00000000e+00, 0.00000000e+00, -0.00000000e+00, 0.00000000e+00,
              -0.00000000e+00, 0.00000000e+00, -4.13507692e-09, 6.02396739e-09,
              -5.56695286e-07, 8.67650908e-07, -0.00000000e+00, 0.00000000e+00,
              -0.00000000e+00, 0.00000000e+00, -0.00000000e+00, 0.00000000e+00,
              -0.00000000e+00, 0.00000000e+00, 1.25235488e-05, -2.71898835e-05,
              5.26746014e-07, -9.85607453e-07, 9.68074683e-05, -2.69257891e-04,
              4.20363829e-04, -8.40421014e-04, 2.63974376e-05, -4.53320085e-05,
              2.09123323e-03, -5.51939855e-03, 4.30641177e-09, -8.60968213e-09,
              0.00000000e+00, -0.00000000e+00, 1.51842668e-07, -3.50075988e-07,
              5.71642357e-03, -1.01288338e-02, 1.76972849e-02, -4.27131368e-02,
              6.54095883e-03, -5.87143120e-02, -5.24784004e-07, 9.81936288e-07,
              -1.25298565e-05, 2.72035783e-05, -7.56315459e-09, 1.28025857e-08,
              -4.29773185e-09, 8.59232862e-09, -1.52179777e-07, 3.50853198e-07,
              -0.00000000e+00, 0.00000000e+00, -4.19855257e-04, 8.39404242e-04,
              -2.09756817e-03, 5.53611836e-03, -2.62540721e-05, 4.50858086e-05,
              -0.00000000e+00, 0.00000000e+00, -0.00000000e+00, 0.00000000e+00,
              -0.00000000e+00, 0.00000000e+00, 0.00000000e+00, -0.00000000e+00,
              0.00000000e+00, -0.00000000e+00, 7.62365091e-09, -1.29049913e-08,
              4.19302452e-09, -6.10838528e-09, 0.00000000e+00, -0.00000000e+00,
              5.62110889e-07, -8.76091527e-07, 0.00000000e+00, -0.00000000e+00,
              0.00000000e+00, -0.00000000e+00, 0.00000000e+00, -0.00000000e+00,
              1.85840988e-07, -2.45850574e-07, 1.70177784e-05, -2.38518365e-05,
              5.41042213e-04, -8.27348167e-04, 1.53859847e-02, -1.52499100e-02,
              1.07470573e-03, -1.06520096e-03, 6.80684454e-02, -6.74664436e-02,
              2.11717667e-02, -1.24300265e-02, 2.23442866e-03, -1.59921626e-03,
              5.77092160e-02, -1.34566057e-02, 2.11314968e-04, -2.56838553e-04,
              3.38685028e-06, -3.96013417e-06, 4.52450701e-03, -5.85422495e-03,
              1.16990262e-02, -2.41642166e-04, 1.82216209e-02, 2.22009792e-02,
              -6.57733487e-03, 5.90408381e-02, -2.03469598e-04, 9.56143720e-04,
              2.31168683e-05, 1.17968566e-03, -9.72673099e-05, 2.70536883e-04,
              -6.33704952e-06, 2.75053295e-05, -3.29042644e-06, 5.20448479e-05,
              -1.79941042e-06, 5.18053231e-06, 1.87939550e-03, 9.61965711e-03,
              2.56291395e-03, 2.12906579e-03, -2.30122345e-03, 1.26685908e-02,
              -7.52647760e-08, 3.11403475e-07, -1.34164480e-08, 3.95818921e-08,
              -7.54544130e-10, 1.82112380e-09;

          for (unsigned i = 0; i < gradsf.rows(); ++i)
            for (unsigned j = 0; j < gradsf.cols(); ++j)
              REQUIRE(gradsf(i, j) ==
                      Approx(gradsf_ans(i, j)).epsilon(Tolerance));
        }
      }
    }
  }
}